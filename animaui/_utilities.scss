// This file will be split into multiple smaller files placing specific utlities
// into their own file. This will also include additional media queries.

@use 'sass:math';

$utilities: (
  "padding": (
    "prefix": "p",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 4,
      "4": $base-padding * 6,
      "5": $base-padding * 8
    ),
  ),
  "padding-left": (
    "prefix": "pl",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 4,
      "4": $base-padding * 6,
      "5": $base-padding * 8
    ),
  ),
  "padding-right": (
    "prefix": "pr",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 4,
      "4": $base-padding * 6,
      "5": $base-padding * 8
    ),
  ),
  "padding-top": (
    "prefix": "pt",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 4,
      "4": $base-padding * 6,
      "5": $base-padding * 8
    ),
  ),
  "padding-bottom": (
    "prefix": "pb",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 4,
      "4": $base-padding * 6,
      "5": $base-padding * 8,
      "6": $base-padding * 10,
      "8": $base-padding * 14,
    ),
  ),
  "margin": (
    "prefix": "m",
    "values": (
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8
    ),
  ),
  "margin-left": (
    "prefix": "ml",
    "values": (
      "auto": auto,
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8
    ),
  ),
  "margin-right": (
    "prefix": "mr",
    "values": (
      "auto": auto,
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8
    ),
  ),
  "margin-top": (
    "prefix": "mt",
    "values": (
      "auto": auto,
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8,
      "6": $base-margin * 10,
      "7": $base-margin * 12,
      "8": $base-margin * 14,
    ),
  ),
  "margin-bottom": (
    "prefix": "mb",
    "values": (
      "auto": auto,
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8
    ),
  ),
  "opacity": (
    "prefix": "o",
    "values": (
      "10": 0.1,
      "20": 0.2,
      "30": 0.3,
      "40": 0.4,
      "50": 0.5,
      "60": 0.6,
      "70": 0.7,
      "80": 0.8,
      "90": 0.9,
      "100": 1,
    ),
  ),
  "border-radius": (
    "prefix": "br",
    "values": (
      "default": $base-border-radius,
      "none": 0,
      "xs": math.div($base-border-radius, 4),
      "sm": math.div($base-border-radius, 2),
      "lg": $base-border-radius * 2,
      "full": 50%,
    )
  ),
  "font-size": (
    "prefix": "font",
    "values": (
      "xs": $font-size-xs,
      "sm": $font-size-sm,
      "md": $base-font-size,
      "lg": $font-size-lg,
      "xl": $font-size-xl,
      "xxl": $font-size-xxl
    )
  ),
  "font-family": (
    "prefix": "font",
    "values": (
      "sans": $font-sans,
      "serif": $font-serif,
      "mono": $font-mono
    )
  ),
  "font-weight": (
    "prefix": "font",
    "values": (
      "thin": 100,
      "xlight": 200,
      "light": 300,
      "reg": 400,
      "med": 500,
      "semibold": 600,
      "bold": 700,
      "xbold": 800,
      "black": 900
    )
  ),
  "z-index": (
    "prefix": "z",
    "values": (
      "0": 0,
      "10": 10,
      "20": 20,
      "30": 30,
      "40": 40,
      "50": 50
    )
  ),
  "text-align": (
    "prefix": "text",
    "values": (
      "left": left,
      "center": center,
      "right": right,
      "justify": justify,
    )
  ),
  "justify-content": (
    "prefix": "justify",
    "values": (
      "start": flex-start,
      "end": flex-end,
      "center": center,
      "between": space-between,
      "around": space-around,
      "evenly": space-evenly,
    )
  ),
  "justify-items": (
    "prefix": "justify-items",
    "values": (
      "start": start,
      "end": end,
      "center": center,
      "stretch": stretch,
    )
  ),
  "justify-self": (
    "prefix": "justify-self",
    "values": (
      "auto": start,
      "start": end,
      "end": end,
      "center": center,
      "stretch": stretch,
    )
  ),
  "align-content": (
    "prefix": "content",
    "values": (
      "center": center,
      "start": flex-start,
      "end": flex-end,
      "between": space-between,
      "around": space-around,
      "evenly": space-evenly,
    )
  ),
  "align-items": (
    "prefix": "items",
    "values": (
      "start": flex-start,
      "end": flex-end,
      "center": center,
      "baseline": baseline,
      "stretch": stretch,
    )
  ),
  "align-self": (
    "prefix": "self",
    "values": (
      "auto": auto,
      "start": flex-start,
      "end": flex-end,
      "center": center,
      "stretch": stretch,
      "baseline": baseline,
    )
  ),
  "place-content": (
    "prefix": "place-content",
    "values": (
      "center": center,
      "start": start,
      "end": end,
      "between": space-between,
      "around": space-around,
      "evenly": space-evenly,
      "stretch": stretch,
    )
  ),
  "place-items": (
    "prefix": "place-items",
    "values": (
      "start": start,
      "end": end,
      "center": center,
      "stretch": stretch,
    )
  ),
  "place-self": (
    "prefix": "place-self",
    "values": (
      "auto": auto,
      "start": start,
      "end": end,
      "center": center,
      "stretch": stretch,
    )
  ),
);

// generate utility classes
@each $property, $map in $utilities {
  $prefix: map-get($map, "prefix");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .#{$prefix} {
        #{$property}: $v;
      }
    } @else {
      .#{$prefix}-#{$k}{
        #{$property}: $v;
      }
    }
  }
}

// display properties
.block {
  display: block;
}
.inline-block {
  display: inline-block;
}
.inline {
  display: inline;
}
.flex {
  display: flex;
}
.inline-flex {
  display: inline-flex;
}
.grid {
  display: grid;
}
.inline-grid {
  display: inline-grid;
}
.hide {
  display: none;
}
visible {
  visibility: visible;
}
.invisible {
  visibility: hidden;
}

.flex-row	{
  flex-direction: row;
}
.flex-row-reverse	{
  flex-direction: row-reverse;
}
.flex-col	{
  flex-direction: column;
}
.flex-col-reverse	{
  flex-direction: column-reverse;
}
.flex-wrap {
  flex-wrap: wrap;
}
.flex-wrap-reverse {
  flex-wrap: wrap-reverse;
}
.flex-nowrap {
  flex-wrap: nowrap;
}

// font stuff
.italic {
  font-style: italic;
}
.not-italic {
  font-style: normal;
}
.underline {
  text-decoration: underline;
}
.line-through	{
  text-decoration: line-through;
}
.no-decoration {
  text-decoration: none;
}
.uppercase {
  text-transform: uppercase;
}
.lowercase {
  text-transform: lowercase;
}
.capitalize {
  text-transform: capitalize;
}
.normal-case {
  text-transform: none;
}

// positions
// static, fixed, etc
.static {
  position: static;
}
.fixed {
  position: fixed;
}
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.sticky	{
  position: sticky;
}

// top, right, left, bottom - each 1 is .25rem or 4 pixels
@for $i from 0 through 100 {
  .top-#{$i} {
    top: calc(#{$i}rem * 0.25);
  }
  .-top-#{$i} {
    top: calc(#{$i}rem * -0.25);
  }
  .right-#{$i} {
    right: calc(#{$i}rem * 0.25);
  }
  .-right-#{$i} {
    right: calc(#{$i}rem * -0.25);
  }
  .bottom-#{$i} {
    bottom: calc(#{$i}rem * 0.25);
  }
  .-bottom-#{$i} {
    bottom: calc(#{$i}rem * -0.25);
  }
  .left-#{$i} {
    left: calc(#{$i}rem * 0.25);
  }
  .-left-#{$i} {
    left: calc(#{$i}rem * -0.25);
  }
}

// floats and clears
.float-right {
  float: right;
}
.float-left {
  float: left;
}
.float-none {
  float: none;
}

.clear-left {
  clear: left;
}
.clear-right {
  clear: right;
}
.clear-both {
  clear: both;
}
.clear-none {
  clear: none;
}

// overflows
.overflow-auto	{
  overflow: auto;
}
.overflow-hidden	{
  overflow: hidden;
}
.overflow-visible	{
  overflow: visible;
}
.overflow-scroll	{
  overflow: scroll;}
.overflow-x-auto	{overflow-x: auto;
}
.overflow-y-auto	{
  overflow-y: auto;
}
.overflow-x-hidden	{
  overflow-x: hidden;
}
.overflow-y-hidden	{
  overflow-y: hidden;
}
.overflow-x-visible	{
  overflow-x: visible;
}
.overflow-y-visible	{
  overflow-y: visible;
}
.overflow-x-scroll	{
  overflow-x: scroll;
}
.overflow-y-scroll	{
  overflow-y: scroll;
}

// borders
// border radius in percentage & pixels from 0 - 100
@for $i from 0 through 100 {
  .br-#{$i} {
    border-radius: math.div($i * 100%, 100);
  }
  .br#{$i}px {
    border-radius: #{$i}px;
  }
}

// border width
.border {
  border-width: 1;
}
@for $i from 0 through 16 {
  .border-#{$i} {
    border-width: #{$i}px
  }
  .border-top-#{$i} {
    border-top-width: #{$i}px
  }
  .border-right-#{$i} {
    border-right-width: #{$i}px
  }
  .border-bottom-#{$i} {
    border-bottom-width: #{$i}px
  }
  .border-left-#{$i} {
    border-left-width: #{$i}px
  }
}

.border-solid	{
  border-style: solid;
}
.border-dashed {
  border-style: dashed;
}
.border-dotted {
  border-style: dotted;
}
.border-double {
  border-style: double;
}
.border-none {
  border-style: none;
}

@each $key, $val in $colors {
  .border-#{$key} {
    border-color: $val;
  }
  @if ($val != black and $val != white) {
    // light variations
    @for $i from 1 through 9 {
      .border-#{$key}-l#{$i} {
        border-color: mix(white, $val, $i * 10%);
      }
    }

    // dark variations
    @for $i from 1 through 9 {
      .border-#{$key}-dark-#{$i} {
        border-color: mix(black, $val, $i * 10%);
      }
    }
  }
}

// dimensions
// this creates dimension control in rems. max-width-12 = 12rem.
$dimension-count: 75;
@for $i from 0 through $dimension-count {
  .width-#{$i} {
    width: #{$i}rem;
  }
  .max-width-#{$i} {
    max-width: #{$i}rem;
  }
  .min-width-#{$i} {
    min-width: #{$i}rem;
  }
  .height-#{$i} {
    height: #{$i}rem;
  }
  .max-height-#{$i} {
    max-height: #{$i}rem;
  }
  .min-height-#{$i} {
    min-height: #{$i}rem;
  }
}

// 1 to 100% width & height settings
@for $i from 0 through 100 {
  .widthp-#{$i} {
    width: math.div($i * 100%, 100);
  }
  .max-widthp-#{$i} {
    max-width: math.div($i * 100%, 100);
  }
  .min-widthp-#{$i} {
    max-width: math.div($i * 100%, 100);
  }  
  .heightp-#{$i} {
    height: math.div($i * 100%, 100);
  }
  .max-heightp-#{$i} {
    max-height: math.div($i * 100%, 100);
  }
  .min-heightp-#{$i} {
    max-height: math.div($i * 100%, 100);
  }  
}

// min & max content
.w-min {
  width: min-content;
}
.max-w-min {
  max-width: min-content;
}
.min-w-min {
  min-width: min-content;
}
.w-max {
  width: max-content;
}
.max-w-max {
  max-width: max-content;
}
.min-w-max {
  min-width: max-content;
}

// 100vh & 100vw section
.fullh {
  height: 100vh;
}
.fullhmin {
  min-height: 100vh;
}
.fullhmax {
  max-height: 100vh;
}
.fullw {
  width: 100vw;
}
.fullwmin {
  min-width: 100vw;
}
.fullwmax {
  max-width: 100vw;
}
.fullscreen {
  width: 100vw;
  height: 100vw;
}

// technically not needed as you can do widthp-100, but this looks nicer
.fullwidth {
  width: 100%;
}
.fullheight {
  height: 100%;
}
// 65 characters is the magic number before text begins to get too long for users.
.max-w-readable {
  max-width: 65ch;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.my-auto {
  margin-top: auto;
  margin-bottom: auto;
}

.box-shadow-1 {
  box-shadow: $base-box-shadow;
}